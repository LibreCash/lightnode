const fs = require('fs')

var apiconf = {
    name: 'REST API',
    methods: {
        ping: { // GET
            connectionId: 'string'
        },
        login: {
            POST: true,
            ROUTEEXTRA: " options.passport.authenticate('local'),",
//            ROUTEEXTRA: "jwt({secret: secretCallback}),",
            username: 'string',
            password: 'password'
        },
        connect: { // GET
            apiVersion: 'string',
            apiKey: 'string',
            res: {
                connectionId: 'string'
            }
        },
        disconnect: { // GET
            connectionId: 'string',
        }, 
        nodeTickers: { // GET
            connectionId: 'string',
            token: 'string'
        },
        nodeState: { // GET
            connectionId: 'string',
            nodeId: 'string',
            res: {
                info: 'string',
                uptime: 'date',
                exchanges: 'array'
            }
        },
        poolNotifications: { // GET
            connectionId: 'string',
            index: 'int',
            count: 'int',
            res: {
                notifications: 'array'
            }
        },
        nodeOnOff: { // GET
            connectionId: 'string',
            onoff: 'string' // on, off, shutdown
        }
    },
    events: {
        node: {
            type: ['added', 'deleted', 'connected', 'disconnected']
        },
        error: {
            ERR1: 'rate difference is out of range'
        }
    }
};

// templates

var tplWarningBanner = `// FILE IS GENERATED! DON'T EDIT! Generated by apigen.js`;

function generateServerRoutes(routes) {
    var tpl = `${tplWarningBanner}
function initRoute(app, api, options) {
${routes}
}

module.exports = {
    'initRoute': initRoute
}
`;
    return tpl;
}

function generateServerApiTemplate(fns, exports) {
    var tpl = `${tplWarningBanner}
// copypaste new functions for init:
//  server-api.template.js -> server-api.js

const
    logger = require('../logger');

${fns}
module.exports = {
${exports}
}
`;
        return tpl;
}


function generateClientApi(fns, exports) {
    var tpl = `${tplWarningBanner}
const
    logger = require('../logger'),
    FormData = require('form-data'),
    form = new FormData(),
    got = require('got');
${fns}
module.exports = {
${exports}
}
`;
            return tpl;
}

function generateAPI() {
    var serverRoutes = '';
    var serverApiFns = '';
    var serverApiExports = '';
    var clientApiFns = '';
    var clientApiExports = '';

    // process methods

    for (var method in apiconf.methods) {
        var methodName = method;
        console.log(method);

        apiPathUrl = `/api/v1/${methodName}`;
        var methodNameCapitalized = methodName.charAt(0).toUpperCase() + methodName.slice(1);

        // server api functions

        var fnparam = '';
        var fnurl = '';
        var fnget = '';
        var fnrouteextra = '';
        var methodType = 'get';

        function processParams (params, mode) {
            for (var param in params) {
                if (param == 'POST' || param == 'DELETE') {
                    methodType = param.toLocaleLowerCase();
                    continue;
                }
                if (param == 'ROUTEEXTRA') {
                    fnrouteextra = params[param];
                    continue;
                }
                if (param == 'req') {
                    processParams (params[param], 'request');
                }
                else if (param == 'res') {
                    processParams (params[param], 'response');
                }
                else {
                    if (mode == 'request') {
                        fnurl += `/:${param}`;
                        fnget += `/\$\{${param}\}`;
                        fnparam += `, ${param}`;
                    }
                    else if (mode == 'response') {
                        // todo: check output params (tests, docs)
                    }
                }
            }
        }
        processParams(apiconf.methods[method], 'request');

        var fnname = `${methodType}${methodNameCapitalized}`;
        
        console.log(' params', fnparam);

        // server routes

        serverRoutes += 
`
    app.${methodType}('${apiPathUrl}${fnurl}',${fnrouteextra} api.${fnname});
`;

        serverApiFns += 
`function ${fnname}(req, res, next) {
    logger.info('${fnname} success');
    res.json({
    });
}\n`;

        serverApiExports += `    ${fnname},\n`;

        // client api functions

        if (methodType == 'get' || methodType == 'delete') {
            clientApiFns += `
async function ${methodName}(host${fnparam}) {
    var res = (await got(host + \`${apiPathUrl}${fnget}\`, {json:true})).body;
    if (res.error && res.error.code == 'CONNECTION_NOT_FOUND') {
        throw res.error;
    }
    return res;
};\n`;
        }
        else if (methodType == 'post') {
            clientApiFns += `
async function ${methodName}(host${fnparam}) {
    // !!! debug version. todo: fix to generate
    var form = new FormData(); // ${fnparam}
    form.append('username', username);
    form.append('password', password);
    var res = (await got.post(host + \`${apiPathUrl}\`, {body:form, json:true})).body;
    if (res.error && res.error.code == 'CONNECTION_NOT_FOUND') {
        throw res.error;
    }
    return res;
};\n`;
        }
        clientApiExports += `    ${methodName},\n`;
    }

    // remove last ',\n'
    serverApiExports = serverApiExports.slice(0, -2);
    clientApiExports = clientApiExports.slice(0, -2);
    
    // process clients

    console.log(serverRoutes);
    console.log(serverApiFns);
    console.log(serverApiExports);
    console.log(clientApiFns);
    console.log(clientApiExports);
    
    console.log('output to', __dirname);
    
    fs.writeFileSync(__dirname + '/server-route.js', generateServerRoutes(serverRoutes));
    fs.writeFileSync(__dirname + '/server-api.template.js', generateServerApiTemplate(serverApiFns, serverApiExports));
    fs.writeFileSync(__dirname + '/client-api.js', generateClientApi(clientApiFns, clientApiExports));
}

function generate() {
    generateAPI();
}

module.exports = {
    generate
}
