// FILE IS GENERATED! DON'T EDIT! Generated by apigen.js
const
    logger = require('../logger'),
    FormData = require('form-data'),
    form = new FormData(),
    got = require('got');

async function ping(host, connectionId) {
    var res = (await got(host + `/api/v1/ping/${connectionId}`, {json:true})).body;
    if (res.error && res.error.code == 'CONNECTION_NOT_FOUND') {
        throw res.error;
    }
    return res;
};

async function login(host, username, password) {
    // !!! debug version. todo: fix to generate
    var form = new FormData(); // , username, password
    form.append('username', username);
    form.append('password', password);
    var res = (await got.post(host + `/api/v1/login`, {body:form, json:true})).body;
    if (res.error && res.error.code == 'CONNECTION_NOT_FOUND') {
        throw res.error;
    }
    return res;
};

async function connect(host, apiVersion, apiKey) {
    var res = (await got(host + `/api/v1/connect/${apiVersion}/${apiKey}`, {json:true})).body;
    if (res.error && res.error.code == 'CONNECTION_NOT_FOUND') {
        throw res.error;
    }
    return res;
};

async function disconnect(host, connectionId) {
    var res = (await got(host + `/api/v1/disconnect/${connectionId}`, {json:true})).body;
    if (res.error && res.error.code == 'CONNECTION_NOT_FOUND') {
        throw res.error;
    }
    return res;
};

async function nodeTickers(host, connectionId, token) {
    var res = (await got(host + `/api/v1/nodeTickers/${connectionId}/${token}`, {json:true})).body;
    if (res.error && res.error.code == 'CONNECTION_NOT_FOUND') {
        throw res.error;
    }
    return res;
};

async function nodeState(host, connectionId, nodeId) {
    var res = (await got(host + `/api/v1/nodeState/${connectionId}/${nodeId}`, {json:true})).body;
    if (res.error && res.error.code == 'CONNECTION_NOT_FOUND') {
        throw res.error;
    }
    return res;
};

async function poolNotifications(host, connectionId, index, count) {
    var res = (await got(host + `/api/v1/poolNotifications/${connectionId}/${index}/${count}`, {json:true})).body;
    if (res.error && res.error.code == 'CONNECTION_NOT_FOUND') {
        throw res.error;
    }
    return res;
};

async function nodeOnOff(host, connectionId, onoff) {
    var res = (await got(host + `/api/v1/nodeOnOff/${connectionId}/${onoff}`, {json:true})).body;
    if (res.error && res.error.code == 'CONNECTION_NOT_FOUND') {
        throw res.error;
    }
    return res;
};

module.exports = {
    ping,
    login,
    connect,
    disconnect,
    nodeTickers,
    nodeState,
    poolNotifications,
    nodeOnOff
}
