// FILE IS GENERATED! DON'T EDIT! Generated by apigen.js
const
    logger = require('../logger'),
    FormData = require('form-data'),
    form = new FormData(),
    got = require('got');

/**
 * @title ping autogen
 * @description Ping pong
 */

async function ping(host, connectionId) {
    var res = (await got(host + `/api/v1/ping/${connectionId}`, {json:true})).body;
    if (res.error && res.error.code == 'CONNECTION_NOT_FOUND') {
        throw res.error;
    }
    return res;
};

/**
 * @title login autogen
 * @description Passport login authentication
 */

async function login(host, username, password) {
    var form = new FormData();
    form.append('username', username);
    form.append('password', password);

    var res = (await got.post(host + `/api/v1/login`, {body:form, json:true})).body;
    if (res.error && res.error.code == 'CONNECTION_NOT_FOUND') {
        throw res.error;
    }
    return res;
};

/**
 * @title connect autogen
 * @description Create connection
 */

async function connect(host, apiVersion, apiKey) {
    var res = (await got(host + `/api/v1/connect/${apiVersion}/${apiKey}`, {json:true})).body;
    if (res.error && res.error.code == 'CONNECTION_NOT_FOUND') {
        throw res.error;
    }
    return res;
};

/**
 * @title disconnect autogen
 * @description Destroy connection
 */

async function disconnect(host, connectionId) {
    var res = (await got(host + `/api/v1/disconnect/${connectionId}`, {json:true})).body;
    if (res.error && res.error.code == 'CONNECTION_NOT_FOUND') {
        throw res.error;
    }
    return res;
};

/**
 * @title nodeTickers autogen
 * @description Get node tickers
 */

async function nodeTickers(host, connectionId, token) {
    var res = (await got(host + `/api/v1/nodeTickers/${connectionId}/${token}`, {json:true})).body;
    if (res.error && res.error.code == 'CONNECTION_NOT_FOUND') {
        throw res.error;
    }
    return res;
};

/**
 * @title nodeState autogen
 * @description Get node state
 */

async function nodeState(host, connectionId, nodeId) {
    var res = (await got(host + `/api/v1/nodeState/${connectionId}/${nodeId}`, {json:true})).body;
    if (res.error && res.error.code == 'CONNECTION_NOT_FOUND') {
        throw res.error;
    }
    return res;
};

/**
 * @title poolNotifications autogen
 * @description Pool notifications *R1 (*R1: read from db)
 */

async function poolNotifications(host, connectionId, index, count) {
    var res = (await got(host + `/api/v1/poolNotifications/${connectionId}/${index}/${count}`, {json:true})).body;
    if (res.error && res.error.code == 'CONNECTION_NOT_FOUND') {
        throw res.error;
    }
    return res;
};

/**
 * @title nodeOnOff autogen
 * @description LightNode on/off/shutdown
 */

async function nodeOnOff(host, connectionId, onoff) {
    var res = (await got(host + `/api/v1/nodeOnOff/${connectionId}/${onoff}`, {json:true})).body;
    if (res.error && res.error.code == 'CONNECTION_NOT_FOUND') {
        throw res.error;
    }
    return res;
};

/**
 * @title nodeExchangeOnOff autogen
 * @description LightNode exchange on/off
 */

async function nodeExchangeOnOff(host, connectionId, onoff) {
    var res = (await got(host + `/api/v1/nodeExchangeOnOff/${connectionId}/${onoff}`, {json:true})).body;
    if (res.error && res.error.code == 'CONNECTION_NOT_FOUND') {
        throw res.error;
    }
    return res;
};

module.exports = {
    ping,
    login,
    connect,
    disconnect,
    nodeTickers,
    nodeState,
    poolNotifications,
    nodeOnOff,
    nodeExchangeOnOff
}
